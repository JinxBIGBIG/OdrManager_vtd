
#include "OdrRepeat.hh"
#include "OdrObject.hh"
#include "OdrReaderXML.hh"
#include <stdio.h>
#include <math.h>
namespace OpenDrive{Repeat::Repeat():Node("\x52\x65\x70\x65\x61\x74"){mOpcode=
ODR_OPCODE_REPEAT;mLevel=2;}Repeat::Repeat(Repeat*Nf2Ao):Node(Nf2Ao){mS=Nf2Ao->
mS;mLength=Nf2Ao->mLength;mDistance=Nf2Ao->mDistance;mTStart=Nf2Ao->mTStart;
mTEnd=Nf2Ao->mTEnd;mZOffsetStart=Nf2Ao->mZOffsetStart;mZOffsetEnd=Nf2Ao->
mZOffsetEnd;mWidthStart=Nf2Ao->mWidthStart;mWidthEnd=Nf2Ao->mWidthEnd;
mHeightStart=Nf2Ao->mHeightStart;mHeightEnd=Nf2Ao->mHeightEnd;mLengthStart=Nf2Ao
->mLengthStart;mLengthEnd=Nf2Ao->mLengthEnd;mRadiusStart=Nf2Ao->mRadiusStart;
mRadiusEnd=Nf2Ao->mRadiusEnd;mIsCircular=Nf2Ao->mIsCircular;}Repeat::~Repeat(){}
void Repeat::printData()const{fprintf(stderr,
"\x20\x20\x20\x20\x20\x20\x20\x20\x6d\x53\x3a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x25\x2e\x31\x30\x6c\x66" "\n"
,mS);fprintf(stderr,
"\x20\x20\x20\x20\x20\x20\x20\x20\x6d\x4c\x65\x6e\x67\x74\x68\x3a\x20\x20\x20\x20\x20\x20\x20\x25\x2e\x31\x30\x6c\x66" "\n"
,mLength);fprintf(stderr,
"\x20\x20\x20\x20\x20\x20\x20\x20\x6d\x44\x69\x73\x74\x61\x6e\x63\x65\x3a\x20\x20\x20\x20\x20\x25\x2e\x31\x30\x6c\x66" "\n"
,mDistance);fprintf(stderr,
"\x20\x20\x20\x20\x20\x20\x20\x20\x6d\x54\x53\x74\x61\x72\x74\x3a\x20\x20\x20\x20\x20\x20\x20\x25\x2e\x31\x30\x6c\x66" "\n"
,mTStart);fprintf(stderr,
"\x20\x20\x20\x20\x20\x20\x20\x20\x6d\x54\x45\x6e\x64\x3a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x25\x2e\x31\x30\x6c\x66" "\n"
,mTEnd);fprintf(stderr,
"\x20\x20\x20\x20\x20\x20\x20\x20\x6d\x5a\x4f\x66\x66\x73\x65\x74\x53\x74\x61\x72\x74\x3a\x20\x25\x2e\x31\x30\x6c\x66" "\n"
,mZOffsetStart);fprintf(stderr,
"\x20\x20\x20\x20\x20\x20\x20\x20\x6d\x5a\x4f\x66\x66\x73\x65\x74\x45\x6e\x64\x3a\x20\x20\x20\x25\x2e\x31\x30\x6c\x66" "\n"
,mZOffsetEnd);if(mIsCircular){fprintf(stderr,
"\x20\x20\x20\x20\x20\x20\x20\x20\x6d\x52\x61\x64\x69\x75\x73\x53\x74\x61\x72\x74\x20\x20\x20\x25\x2e\x31\x30\x6c\x66" "\n"
,mRadiusStart);fprintf(stderr,
"\x20\x20\x20\x20\x20\x20\x20\x20\x6d\x52\x61\x64\x69\x75\x73\x45\x6e\x64\x3a\x20\x20\x20\x20\x25\x2e\x31\x30\x6c\x66" "\n"
,mRadiusEnd);}else{fprintf(stderr,
"\x20\x20\x20\x20\x20\x20\x20\x20\x6d\x4c\x65\x6e\x67\x74\x68\x53\x74\x61\x72\x74\x20\x20\x20\x25\x2e\x31\x30\x6c\x66" "\n"
,mLengthStart);fprintf(stderr,
"\x20\x20\x20\x20\x20\x20\x20\x20\x6d\x4c\x65\x6e\x67\x74\x68\x45\x6e\x64\x3a\x20\x20\x20\x20\x25\x2e\x31\x30\x6c\x66" "\n"
,mLengthEnd);fprintf(stderr,
"\x20\x20\x20\x20\x20\x20\x20\x20\x6d\x57\x69\x64\x74\x68\x53\x74\x61\x72\x74\x3a\x20\x20\x20\x25\x2e\x31\x30\x6c\x66" "\n"
,mWidthStart);fprintf(stderr,
"\x20\x20\x20\x20\x20\x20\x20\x20\x6d\x57\x69\x64\x74\x68\x45\x6e\x64\x3a\x20\x20\x20\x20\x20\x25\x2e\x31\x30\x6c\x66" "\n"
,mWidthEnd);}}bool Repeat::read(ReaderXML*F3vnM){mS=F3vnM->getDouble("\x73");
mLength=F3vnM->getDouble("\x6c\x65\x6e\x67\x74\x68");mDistance=F3vnM->getDouble(
"\x64\x69\x73\x74\x61\x6e\x63\x65");mTStart=F3vnM->getDouble(
"\x74\x53\x74\x61\x72\x74");mTEnd=F3vnM->getDouble("\x74\x45\x6e\x64");
mZOffsetStart=F3vnM->getDouble(
"\x7a\x4f\x66\x66\x73\x65\x74\x53\x74\x61\x72\x74");mZOffsetEnd=F3vnM->getDouble
("\x7a\x4f\x66\x66\x73\x65\x74\x45\x6e\x64");mWidthStart=F3vnM->getDouble(
"\x77\x69\x64\x74\x68\x53\x74\x61\x72\x74");mWidthEnd=F3vnM->getDouble(
"\x77\x69\x64\x74\x68\x45\x6e\x64");mHeightStart=F3vnM->getDouble(
"\x68\x65\x69\x67\x68\x74\x53\x74\x61\x72\x74");mHeightEnd=F3vnM->getDouble(
"\x68\x65\x69\x67\x68\x74\x45\x6e\x64");mLengthStart=F3vnM->getDouble(
"\x6c\x65\x6e\x67\x74\x68\x53\x74\x61\x72\x74");mLengthEnd=F3vnM->getDouble(
"\x6c\x65\x6e\x67\x74\x68\x45\x6e\x64");mRadiusStart=F3vnM->getDouble(
"\x72\x61\x64\x69\x75\x73\x53\x74\x61\x72\x74");mRadiusEnd=F3vnM->getDouble(
"\x72\x61\x64\x69\x75\x73\x45\x6e\x64");const ReaderXML::AttribMap&BMyX5=F3vnM->
getAllAttributes();mIsCircular=(BMyX5.find(
"\x72\x61\x64\x69\x75\x73\x53\x74\x61\x72\x74")!=BMyX5.end())&&(BMyX5.find(
"\x72\x61\x64\x69\x75\x73\x45\x6e\x64")!=BMyX5.end());return true;}Node*Repeat::
getCopy(bool Mupxf){Node*dzamm=new Repeat(this);if(Mupxf)deepCopy(dzamm);return 
dzamm;}void Repeat::calcPrepareData(){Object*QAAX5=reinterpret_cast<Object*>(
getParent());if(!QAAX5)return;QAAX5->mHasRepeat=true;}}
