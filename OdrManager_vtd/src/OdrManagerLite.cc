
#include <stdio.h>
#include "OdrManagerLite.hh"
#include "OdrPosition.hh"
#include "OdrReaderXML.hh"
#include "OdrRoadData.hh"
#include <assert.h>
#include <iostream>
namespace OpenDrive
{
  OdrManagerLite::OdrManagerLite() : mRoadData(0), mPos(0),
                                     mSurfaceScale(1.0) { intro(); }
  OdrManagerLite::OdrManagerLite(const unsigned int &
                                     flags) : mRoadData(0), mPos(0), mSurfaceScale(1.0), mAttachedOnly(false)
  {
    if (!(flags &
          0x20070202))
      intro();
  }
  OdrManagerLite::~OdrManagerLite()
  {
    if (!mAttachedOnly)
    {
      if (
          mRoadData)
        delete mRoadData;
      mRoadData = 0;
    }
  }
  void OdrManagerLite::intro()
  {
    fprintf(
        stderr,
        "\n"
        "\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23"
        "\n");
    fprintf(stderr,
            "\x23\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x4f\x70\x65\x6e\x44\x52\x49\x56\x45\x20\x4d\x61\x6e\x61\x67\x65\x72\x20\x25\x31\x36\x73\x20\x2d\x20\x4c\x69\x74\x65\x20\x45\x64\x69\x74\x69\x6f\x6e\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\n",
            "\x31\x2e\x35\x2e\x35");
    fprintf(stderr,
            "\x23\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x28\x63\x29\x32\x30\x30\x38\x2d\x32\x30\x31\x39\x20\x62\x79\x20\x56\x49\x52\x45\x53\x20\x53\x69\x6d\x75\x6c\x61\x74\x69\x6f\x6e\x73\x74\x65\x63\x68\x6e\x6f\x6c\x6f\x67\x69\x65\x20\x47\x6d\x62\x48\x2c\x20\x47\x65\x72\x6d\x61\x6e\x79\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x4e\x4f\x54\x45\x3a\x20\x54\x68\x69\x73\x20\x73\x6f\x66\x74\x77\x61\x72\x65\x20\x69\x73\x20\x70\x72\x6f\x76\x69\x64\x65\x64\x20\x41\x53\x20\x49\x53\x20\x77\x69\x74\x68\x6f\x75\x74\x20\x61\x6e\x79\x20\x77\x61\x72\x72\x61\x6e\x74\x79\x20\x6f\x72\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x20\x20\x20\x20\x20\x20\x70\x65\x72\x66\x6f\x72\x6d\x61\x6e\x63\x65\x20\x67\x75\x61\x72\x61\x6e\x74\x65\x65\x73\x2e\x20\x56\x49\x52\x45\x53\x20\x6d\x75\x73\x74\x20\x6e\x6f\x74\x20\x62\x65\x20\x68\x65\x6c\x64\x20\x6c\x69\x61\x62\x6c\x65\x20\x66\x6f\x72\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x20\x20\x20\x20\x20\x20\x61\x6e\x79\x20\x64\x61\x6d\x61\x67\x65\x73\x20\x69\x6e\x63\x75\x72\x72\x69\x6e\x67\x20\x66\x72\x6f\x6d\x20\x74\x68\x65\x20\x75\x73\x65\x20\x6f\x66\x20\x74\x68\x69\x73\x20\x73\x6f\x66\x74\x77\x61\x72\x65\x2e\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x20\x20\x4e\x6f\x76\x65\x6d\x62\x65\x72\x20\x31\x30\x2c\x20\x32\x30\x31\x38\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x46\x6f\x72\x20\x71\x75\x65\x73\x74\x69\x6f\x6e\x73\x2c\x20\x66\x65\x65\x64\x62\x61\x63\x6b\x20\x61\x6e\x64\x20\x66\x6f\x72\x20\x6f\x72\x64\x65\x72\x69\x6e\x67\x20\x74\x68\x65\x20\x66\x75\x6c\x6c\x20\x76\x65\x72\x73\x69\x6f\x6e\x20\x6f\x66\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x74\x68\x69\x73\x20\x73\x6f\x66\x74\x77\x61\x72\x65\x2c\x20\x70\x6c\x65\x61\x73\x65\x20\x72\x65\x66\x65\x72\x20\x74\x6f\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x56\x49\x52\x45\x53\x20\x53\x69\x6d\x75\x6c\x61\x74\x69\x6f\x6e\x73\x74\x65\x63\x68\x6e\x6f\x6c\x6f\x67\x69\x65\x20\x47\x6d\x62\x48\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x47\x72\x61\x73\x73\x69\x6e\x67\x65\x72\x20\x53\x74\x72\x61\x73\x73\x65\x20\x38\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x38\x33\x30\x34\x33\x20\x42\x61\x64\x20\x41\x69\x62\x6c\x69\x6e\x67\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x47\x65\x72\x6d\x61\x6e\x79\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x70\x68\x6f\x6e\x65\x20\x2b\x34\x39\x2e\x38\x30\x36\x31\x2e\x39\x33\x39\x30\x39\x33\x2d\x30\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x66\x61\x78\x20\x20\x20\x2b\x34\x39\x2e\x38\x30\x36\x31\x2e\x39\x33\x39\x30\x39\x33\x2d\x31\x33\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x6f\x70\x65\x6e\x64\x72\x69\x76\x65\x40\x76\x69\x72\x65\x73\x2e\x63\x6f\x6d\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x77\x77\x77\x2e\x76\x69\x72\x65\x73\x2e\x63\x6f\x6d\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23"
            "\n");
    fprintf(stderr,
            "\x23\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x54\x48\x49\x53\x20\x53\x4f\x46\x54\x57\x41\x52\x45\x20\x49\x53\x20\x4c\x49\x43\x45\x4e\x53\x45\x44\x20\x46\x4f\x52\x20\x43\x4f\x4d\x4d\x45\x52\x43\x49\x41\x4c\x20\x41\x4e\x44\x20\x45\x56\x41\x4c\x55\x41\x54\x49\x4f\x4e\x20\x55\x53\x45\x2e\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x50\x4c\x45\x41\x53\x45\x20\x43\x4f\x4e\x54\x41\x43\x54\x3a\x20\x6f\x70\x65\x6e\x64\x72\x69\x76\x65\x40\x76\x69\x72\x65\x73\x2e\x63\x6f\x6d\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\n");
    fprintf(stderr,
            "\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23"
            "\n");
  }
  bool OdrManagerLite::loadFile(const std::string &name)
  {
    if (mRoadData)
      delete mRoadData;
    OpenDrive::ReaderXML *LxeNv = new OpenDrive::ReaderXML();
    LxeNv->setFilename(name);
    LxeNv->read();
    if (!(LxeNv->getRootNode()))
      return false;
    mRoadData = new RoadData(LxeNv->getRootNode());
    delete LxeNv;
    return true;
  }
  void
  OdrManagerLite::printData()
  {
    if (mRoadData)
      mRoadData->getRootNode()->print();
  }
  Position *OdrManagerLite::createPosition()
  {
    static bool pKomT = false;
    if (pKomT)
      return 0;
    pKomT = true;
    return new Position;
  }
  void OdrManagerLite::activatePosition(
      Position *oxWEh)
  {
    if (oxWEh)
    {
      mPos = oxWEh;
      mPos->setSurfaceScale(mSurfaceScale);
    }
  }
  const TrackCoord &OdrManagerLite::getTrackPos() const
  {
    assert(mPos);
    return mPos->getTrackPos();
  }
  const LaneCoord &OdrManagerLite::getLanePos() const
  {
    assert(mPos);
    return mPos->getLanePos();
  }
  const Coord &OdrManagerLite::getInertialPos() const
  {
    assert(mPos);
    return mPos->getInertialPos();
  }
  const Coord &OdrManagerLite::
      getFootPoint() const
  {
    assert(mPos);
    return mPos->getFootPoint();
  }
  void
  OdrManagerLite::setPos(const TrackCoord &value)
  {
    assert(mPos);
    mPos->setPos(value);
  }
  void OdrManagerLite::setTrackPos(const int &id, const double &BJBDA, const double &rkiXc)
  {
    assert(mPos);
    mPos->setTrackPos(id, BJBDA, rkiXc);
  }
  void OdrManagerLite::
      setTrackPos(const std::string &id, const double &BJBDA, const double &rkiXc)
  {
    assert(
        mPos);
    mPos->setTrackPos(id, BJBDA, rkiXc);
  }
  void OdrManagerLite::setTrackPos(const TrackCoord &value)
  {
    assert(mPos);
    mPos->setTrackPos(value);
  }
  void OdrManagerLite::
      setPos(const LaneCoord &value)
  {
    assert(mPos);
    mPos->setPos(value);
  }
  void
  OdrManagerLite::setLanePos(const int &LqMUn, const int &laneId, const double &BJBDA,
                             const double &offset)
  {
    assert(mPos);
    mPos->setLanePos(LqMUn, laneId, BJBDA, offset);
  }
  void OdrManagerLite::setLanePos(const std::string &LqMUn, const int &laneId, const double &BJBDA, const double &offset)
  {
    assert(mPos);
    mPos->setLanePos(LqMUn, laneId,
                     BJBDA, offset);
  }
  void OdrManagerLite::setLanePos(const LaneCoord &value)
  {
    assert(
        mPos);
    mPos->setLanePos(value);
  }
  void OdrManagerLite::setPos(const Coord &value)
  {
    assert(mPos);
    mPos->setPos(value);
  }
  void OdrManagerLite::setInertialPos(const double &x, const double &y, const double &hkK5C)
  {
    assert(mPos);
    mPos->setInertialPos(x,
                         y, hkK5C);
  }
  bool OdrManagerLite::track2inertial()
  {
    assert(mPos);
    return mPos->track2inertial() == RoadQuery::RESULT_ON_ROAD;
  }
  bool OdrManagerLite::inertial2track()
  {
    assert(mPos);
    return mPos->inertial2track() == RoadQuery::RESULT_ON_ROAD;
  }
  bool
  OdrManagerLite::lane2inertial()
  {
    assert(mPos);
    return mPos->lane2inertial() ==
           RoadQuery::RESULT_ON_ROAD;
  }
  bool OdrManagerLite::inertial2lane()
  {
    assert(mPos);
    return mPos->inertial2lane() == RoadQuery::RESULT_ON_ROAD;
  }
  void OdrManagerLite::
      print(int NS8oU)
  {
    assert(mPos);
    mPos->print(NS8oU);
  }
  const double &OdrManagerLite::
      getCurvature() const
  {
    assert(mPos);
    return mPos->getCurvature();
  }
  double
  OdrManagerLite::getTrackLen(int LqMUn)
  {
    assert(mPos);
    return mPos->getTrackLen(
        LqMUn);
  }
  double OdrManagerLite::getTrackLen(const std::string &LqMUn)
  {
    assert(mPos);
    return mPos->getTrackLen(LqMUn);
  }
  const double &OdrManagerLite::getLaneWidth()
  {
    assert(mPos);
    mPos->lane2laneWidth();
    return mPos->getLaneWidth();
  }
  void
  OdrManagerLite::footPoint2inertial()
  {
    assert(mPos);
    mPos->footPoint2inertial();
  }
  std::string OdrManagerLite::getVersion() { return std::string(
      "\x31\x2e\x35\x2e\x35"); }
  std::string OdrManagerLite::getGeoReference() {
      if(!mRoadData->findFirstNode(ODR_OPCODE_GEO_REFERENCE))
          return std::string();
      else
          return mRoadData->findFirstNode(ODR_OPCODE_GEO_REFERENCE)->getCDATA(); }
} // namespace OpenDrive
